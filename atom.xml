<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jessica is thinking</title>
  
  <subtitle>Blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-04-07T01:46:21.729Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Kaiwen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker打包reinvent4分子生成工具</title>
    <link href="http://example.com/2025/04/07/docker%E6%89%93%E5%8C%85reinvent4%E5%88%86%E5%AD%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
    <id>http://example.com/2025/04/07/docker%E6%89%93%E5%8C%85reinvent4%E5%88%86%E5%AD%90%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</id>
    <published>2025-04-07T01:41:14.776Z</published>
    <updated>2025-04-07T01:46:21.729Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-安装docker和启动（参考）"><a href="#1-安装docker和启动（参考）" class="headerlink" title="1.安装docker和启动（参考）"></a>1.安装docker和启动（参考）</h4><h5 id="1-1-安装docker"><a href="#1-1-安装docker" class="headerlink" title="1.1 安装docker:"></a>1.1 安装docker:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> apt-key add -</span><br><span class="line"><span class="built_in">sudo</span> add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h5 id="1-2-启动："><a href="#1-2-启动：" class="headerlink" title="1.2 启动："></a>1.2 启动：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> /etc/init.d/docker start</span><br></pre></td></tr></table></figure><h4 id="2-基础环境拉取"><a href="#2-基础环境拉取" class="headerlink" title="2.基础环境拉取"></a>2.基础环境拉取</h4><p>对于后续要用到的环境，如anaconda3,需要提前拉取</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull continuumio/anaconda3</span><br></pre></td></tr></table></figure><h4 id="3-用docker创建虚拟环境reinvent4"><a href="#3-用docker创建虚拟环境reinvent4" class="headerlink" title="3.用docker创建虚拟环境reinvent4"></a>3.用docker创建虚拟环境reinvent4</h4><h5 id="3-1-1方式一，通过导出环境配置文件安装虚拟环境"><a href="#3-1-1方式一，通过导出环境配置文件安装虚拟环境" class="headerlink" title="3.1.1方式一，通过导出环境配置文件安装虚拟环境"></a>3.1.1方式一，通过导出环境配置文件安装虚拟环境</h5><p>导出环境文件：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda activate reinvent4</span><br><span class="line">conda <span class="built_in">env</span> <span class="built_in">export</span> --no-builds &gt; environment.yml <span class="comment"># --no-builds表示是跨平台的</span></span><br><span class="line"><span class="comment"># 删除environment.yml最后一行</span></span><br></pre></td></tr></table></figure><p>根据配置文件安装：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 普通模式</span></span><br><span class="line">FROM continuumio/anaconda3</span><br><span class="line"></span><br><span class="line">EXPOSE 5009</span><br><span class="line">COPY environment.yml .</span><br><span class="line"></span><br><span class="line">RUN conda <span class="built_in">env</span> create -f environment.yml</span><br><span class="line">RUN conda <span class="built_in">env</span> list</span><br><span class="line"></span><br><span class="line">SHELL [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;source activate reinvent4&quot;</span> &gt; ~/.bashrc</span><br><span class="line">ENV PATH /opt/conda/envs/env/bin:<span class="variable">$PATH</span></span><br><span class="line">CMD [<span class="string">&quot;/bin/bash&quot;</span>]</span><br></pre></td></tr></table></figure><h5 id="3-1-2方式二，直接本地复制环境（需要保证虚拟路径和本地路径一致）"><a href="#3-1-2方式二，直接本地复制环境（需要保证虚拟路径和本地路径一致）" class="headerlink" title="3.1.2方式二，直接本地复制环境（需要保证虚拟路径和本地路径一致）"></a>3.1.2方式二，直接本地复制环境（需要保证虚拟路径和本地路径一致）</h5><p>在项目根目录下创建Dockerfile文件（名字即为Dockerfile，无后缀）:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用一个轻量级的 Linux 基础镜像，如 Ubuntu 或 Debian</span></span><br><span class="line">FROM ubuntu:20.04</span><br><span class="line"><span class="comment"># 安装必要的依赖.libxrender1等包是由于运行环境发现缺少相关依赖后依次补充的</span></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">    wget \</span><br><span class="line">    bzip2 \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    libxrender1 \</span><br><span class="line">    libxtst6 \</span><br><span class="line">    libxi6 \</span><br><span class="line">    libexpat1-dev \</span><br><span class="line">    &amp;&amp; <span class="built_in">rm</span> -rf /var/lib/apt/lists/*</span><br><span class="line"><span class="comment"># 下载并安装 Miniconda</span></span><br><span class="line">RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh &amp;&amp; \</span><br><span class="line">    /bin/bash ~/miniconda.sh -b -p /home/xiang_wenkai/anaconda3 &amp;&amp; \</span><br><span class="line">    <span class="built_in">rm</span> ~/miniconda.sh &amp;&amp; \</span><br><span class="line">    /home/xiang_wenkai/anaconda3/bin/conda clean --all -y</span><br><span class="line"><span class="comment"># 将 Conda 添加到 PATH</span></span><br><span class="line">ENV PATH=<span class="string">&quot;/opt/conda/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="comment"># 将本地 Conda 环境复制到镜像中</span></span><br><span class="line">COPY reinvent4 /home/xiang_wenkai/anaconda3/envs/reinvent4</span><br><span class="line"><span class="comment"># 激活环境（将环境的 bin 目录添加到 PATH）</span></span><br><span class="line">SHELL [<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>]</span><br><span class="line">ENV PATH=<span class="string">&quot;/home/xiang_wenkai/anaconda3/envs/reinvent4/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">CMD [<span class="string">&quot;/bin/bash&quot;</span>]</span><br></pre></td></tr></table></figure><h5 id="3-2根据Dockfile构建镜像环境："><a href="#3-2根据Dockfile构建镜像环境：" class="headerlink" title="3.2根据Dockfile构建镜像环境："></a>3.2根据Dockfile构建镜像环境：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t reinvent4 -f Dockerfile .</span><br></pre></td></tr></table></figure><h5 id="3-3保存本地镜像："><a href="#3-3保存本地镜像：" class="headerlink" title="3.3保存本地镜像："></a>3.3保存本地镜像：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images  <span class="comment"># 展示系统镜像</span></span><br><span class="line">docker save -o reinvent4.tar &#123;<span class="built_in">id</span>&#125;  <span class="comment"># 保存镜像ID为id的镜像</span></span><br></pre></td></tr></table></figure><h5 id="3-4执行镜像"><a href="#3-4执行镜像" class="headerlink" title="3.4执行镜像"></a>3.4执行镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -ti --<span class="built_in">rm</span> &#123;<span class="built_in">id</span>&#125; bash</span><br></pre></td></tr></table></figure><h4 id="4-用docker创建的环境reinvent4，进一步创建推理镜像"><a href="#4-用docker创建的环境reinvent4，进一步创建推理镜像" class="headerlink" title="4.用docker创建的环境reinvent4，进一步创建推理镜像"></a>4.用docker创建的环境reinvent4，进一步创建推理镜像</h4><h5 id="4-1-准备Dockerfile"><a href="#4-1-准备Dockerfile" class="headerlink" title="4.1 准备Dockerfile"></a>4.1 准备Dockerfile</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM reinvent4</span><br><span class="line"></span><br><span class="line">COPY REINVENT4-main REINVENT4</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">chmod</span> -R 777 /REINVENT4/</span><br><span class="line"></span><br><span class="line">WORKDIR REINVENT4</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;inference.py&quot;</span>]</span><br></pre></td></tr></table></figure><h5 id="4-2-构建-Docker-镜像："><a href="#4-2-构建-Docker-镜像：" class="headerlink" title="4.2 构建 Docker 镜像："></a>4.2 构建 Docker 镜像：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">docker build -t reinvent_gen -f REINVENT4-main/Dockerfile .</span><br></pre></td></tr></table></figure><h5 id="4-3-传递参数，运行容器，测试分子生成场景："><a href="#4-3-传递参数，运行容器，测试分子生成场景：" class="headerlink" title="4.3 传递参数，运行容器，测试分子生成场景："></a>4.3 传递参数，运行容器，测试分子生成场景：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /home/xiang_wenkai/REINVENT4-main:/REINVENT4 --gpus all --<span class="built_in">rm</span> reinvent_gen --mode denovo --input_dir configs/toml --output_dir output --input_file no --output_file sampling_denovo.csv --num_smiles 100 --unique_molecules True --randomize_smiles True --device cuda:0 --<span class="built_in">log</span> sampling.log</span><br><span class="line">docker run -v /home/xiang_wenkai/REINVENT4-main:/REINVENT4 --gpus all --<span class="built_in">rm</span> reinvent_gen --mode scaffold --input_dir configs/toml --output_dir output --input_file warheads.smi --output_file sampling_scaffold.csv --num_smiles 100 --unique_molecules True --randomize_smiles True --device cuda:0 --<span class="built_in">log</span> sampling.log</span><br><span class="line">docker run -v /home/xiang_wenkai/REINVENT4-main:/REINVENT4 --gpus all --<span class="built_in">rm</span> reinvent_gen --mode <span class="built_in">link</span> --input_dir configs/toml --output_dir output --input_file warheads.smi --output_file sampling_link.csv --num_smiles 100 --unique_molecules True --randomize_smiles True --device cuda:0 --<span class="built_in">log</span> sampling.log</span><br><span class="line">docker run -v /home/xiang_wenkai/REINVENT4-main:/REINVENT4 --gpus all --<span class="built_in">rm</span> reinvent_gen --mode R-group --input_dir configs/toml --output_dir output --input_file scaffolds.smi --output_file sampling_rgroup.csv --num_smiles 100 --unique_molecules True --randomize_smiles True --device cuda:0 --<span class="built_in">log</span> sampling.log</span><br><span class="line">docker run -v /home/xiang_wenkai/REINVENT4-main:/REINVENT4 --gpus all --<span class="built_in">rm</span> reinvent_gen --mode mol2mol --input_dir configs/toml --output_dir output --input_file mol2mol.smi --output_file sampling_mol2mol.csv --num_smiles 100 --unique_molecules True --randomize_smiles True --device cuda:0 --<span class="built_in">log</span> sampling.log</span><br></pre></td></tr></table></figure><h5 id="4-4-保存本地镜像："><a href="#4-4-保存本地镜像：" class="headerlink" title="4.4 保存本地镜像："></a>4.4 保存本地镜像：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images  <span class="comment"># 展示系统镜像</span></span><br><span class="line">docker save -o reinvent_gen.tar &#123;<span class="built_in">id</span>&#125;  <span class="comment"># 保存镜像ID为id的镜像</span></span><br></pre></td></tr></table></figure><h5 id="docker-加载打包完成的镜像："><a href="#docker-加载打包完成的镜像：" class="headerlink" title="docker 加载打包完成的镜像："></a>docker 加载打包完成的镜像：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i xxx.tar</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-安装docker和启动（参考）&quot;&gt;&lt;a href=&quot;#1-安装docker和启动（参考）&quot; class=&quot;headerlink&quot; title=&quot;1.安装docker和启动（参考）&quot;&gt;&lt;/a&gt;1.安装docker和启动（参考）&lt;/h4&gt;&lt;h5 id=&quot;1-1-安</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MultiPPIMI复现并个性化预测</title>
    <link href="http://example.com/2025/03/21/MultiPPIMI%E5%A4%8D%E7%8E%B0%E5%B9%B6%E4%B8%AA%E6%80%A7%E5%8C%96%E9%A2%84%E6%B5%8B/"/>
    <id>http://example.com/2025/03/21/MultiPPIMI%E5%A4%8D%E7%8E%B0%E5%B9%B6%E4%B8%AA%E6%80%A7%E5%8C%96%E9%A2%84%E6%B5%8B/</id>
    <published>2025-03-21T07:46:55.997Z</published>
    <updated>2025-03-21T07:47:48.964Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a href="https://github.com/sun-heqi/MultiPPIMI/tree/main">https://github.com/sun-heqi/MultiPPIMI/tree/main</a><br>特征说明：<a href="https://pubs.acs.org/doi/suppl/10.1021/acs.jcim.3c01527/suppl_file/ci3c01527_si_001.pdf">https://pubs.acs.org/doi/suppl/10.1021/acs.jcim.3c01527/suppl_file/ci3c01527_si_001.pdf</a></p><p>环境安装：按照项目地址的教程进行安装  </p><h3 id="蛋白pfeature"><a href="#蛋白pfeature" class="headerlink" title="蛋白pfeature"></a>蛋白pfeature</h3><p>参考文档：<a href="https://pypi.org/project/pfeature/">https://pypi.org/project/pfeature/</a>  </p><p>在12-4090服务器：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pfeature</span><br><span class="line">pfeature_comp -i input.fasta  -o result.csv -j PCP</span><br></pre></td></tr></table></figure><h3 id="蛋白结构feature"><a href="#蛋白结构feature" class="headerlink" title="蛋白结构feature"></a>蛋白结构feature</h3><p>fasta数据构造(input.fasta)：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;FAM171A2</span><br><span class="line">KSPPEPPSPQEILIKVQVYVSGELVPLARASVDVFGNRTLLAAGTTDSEGVATLPLSYRLGTWVLVTAARPGFLTNSVPWRVDKLPLYASVSLYLLP</span><br><span class="line">&gt;synuclein</span><br><span class="line">LGKNEEGAPQEGILEDMPVDPDNEAYEMPSEEGYQDYEPEA</span><br><span class="line">&gt;Q13490</span><br><span class="line">HAARMRTFMYWPSSVPVQPEQLASAGFYYVGRNDDVKCFCCDGGLRCWESGDDPWVEHAKWFPRCEFL</span><br></pre></td></tr></table></figure><p>参考代码：<a href="https://github.com/xiangwenkai/FAPM">https://github.com/xiangwenkai/FAPM</a><br>在松江服务器，执行命令：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate FAPM</span><br><span class="line">python esm_scripts/extract.py esm2_t30_150M_UR50D data/fasta/input.fasta data/emb_esm2_150m --repr_layers 30 --truncation_seq_length 1024 --include per_tok</span><br></pre></td></tr></table></figure><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>1.分子feature,计算各类性质，然后写入compound_phy.tsv文件;<br>2.esm embedding写入protein_esm2.csv文件；<br>3.pfeature特征写入protein_phy.csv文件；<br>4.蛋白序列写入；<br>5。测试数据写入S5文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">from rdkit import Chem</span><br><span class="line">from rdkit.Chem import Descriptors</span><br><span class="line">from rdkit.Chem import rdMolDescriptors</span><br><span class="line">import torch</span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">mol_prop = [<span class="string">&#x27;NumRings&#x27;</span>, <span class="string">&#x27;NumAromaticCarbocycles&#x27;</span>, <span class="string">&#x27;NumAromaticRings&#x27;</span>, <span class="string">&#x27;NumAliphaticRings&#x27;</span>, <span class="string">&#x27;NumAromaticHeterocycles&#x27;</span>, <span class="string">&#x27;NumHeteroatoms&#x27;</span>, <span class="string">&#x27;NumSaturatedHeterocycles&#x27;</span>, <span class="string">&#x27;NumSaturatedCarbocycles&#x27;</span>, <span class="string">&#x27;NumSaturatedRings&#x27;</span>, <span class="string">&#x27;NOCount&#x27;</span>]</span><br><span class="line">def cal_mol_prop(mol):</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;NumRings&quot;</span>: rdMolDescriptors.CalcNumRings(mol),  <span class="comment"># 环的总数</span></span><br><span class="line">        <span class="string">&quot;NumAromaticCarbocycles&quot;</span>: rdMolDescriptors.CalcNumAromaticCarbocycles(mol),  <span class="comment"># 芳香碳环数量</span></span><br><span class="line">        <span class="string">&quot;NumAromaticRings&quot;</span>: rdMolDescriptors.CalcNumAromaticRings(mol),  <span class="comment"># 芳香环数量</span></span><br><span class="line">        <span class="string">&quot;NumAliphaticRings&quot;</span>: rdMolDescriptors.CalcNumAliphaticRings(mol),  <span class="comment"># 脂肪环数量</span></span><br><span class="line">        <span class="string">&quot;NumAromaticHeterocycles&quot;</span>: rdMolDescriptors.CalcNumAromaticHeterocycles(mol),  <span class="comment"># 芳香杂环数量</span></span><br><span class="line">        <span class="string">&quot;NumHeteroatoms&quot;</span>: rdMolDescriptors.CalcNumHeteroatoms(mol),  <span class="comment"># 杂原子数量</span></span><br><span class="line">        <span class="string">&quot;NumSaturatedHeterocycles&quot;</span>: rdMolDescriptors.CalcNumSaturatedHeterocycles(mol),  <span class="comment"># 饱和杂环数量</span></span><br><span class="line">        <span class="string">&quot;NumSaturatedCarbocycles&quot;</span>: rdMolDescriptors.CalcNumSaturatedCarbocycles(mol),  <span class="comment"># 饱和碳环数量</span></span><br><span class="line">        <span class="string">&quot;NumSaturatedRings&quot;</span>: rdMolDescriptors.CalcNumSaturatedRings(mol),  <span class="comment"># 饱和环数量</span></span><br><span class="line">        <span class="string">&quot;NOCount&quot;</span>: Descriptors.NOCount(mol),  <span class="comment"># 氮氧原子总数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">smiles = [r<span class="string">&#x27;C[C@H]1/C(=N/N=C\2/[C@@H](C[C@@]3([C@@H]4[C@H]([C@H]5[C@@]([C@H](CC5)O)(CC4)C)CC[C@H]3C2)C)C)/C[C@H]6[C@](C1)([C@@H]7[C@H]([C@H]8[C@@]([C@H](CC8)O)(CC7)C)CC6)C&#x27;</span>,</span><br><span class="line">          r<span class="string">&#x27;C1CCN(C1)[C@H]2CCC3=C(CC2)C=C(C=C3)NC4=NN(C(=N4)N)C5=NN=C6C(=C5)CCCC7=CC=CC=C76&#x27;</span>,</span><br><span class="line">          r<span class="string">&#x27;CC(C)[C@@]1(C(=O)N2[C@H](C(=O)N3CCC[C@H]3[C@@]2(O1)O)CC4=CC=CC=C4)NC(=O)[C@@H]5C[C@H]6[C@@H](CC7=CNC8=CC=CC6=C78)N(C5)C&#x27;</span>,</span><br><span class="line">          r<span class="string">&#x27;C1CCC2(C1)C(=O)N([C@@H](CN2)C3=CC(=CC(=C3)F)F)CC(=O)NC4=CC5=C(C[C@@]6(C5)C7=C(NC6=O)N=CC=C7)C=C4&#x27;</span>,</span><br><span class="line">          r<span class="string">&#x27;C[C@@]1(C(=O)N2[C@H](C(=O)N3CCC[C@H]3[C@@]2(O1)O)CC4=CC=CC=C4)NC(=O)[C@@H]5C[C@H]6[C@@H](CC7=CNC8=CC=CC6=C78)N(C5)C&#x27;</span>,</span><br><span class="line">          r<span class="string">&#x27;C1=CC=C2C(=C1)C=CC3=C2C=CC(=C3)C4=CC(=NN4C5=CC=C(C=C5)NC(=O)CN)C(F)(F)F&#x27;</span>,</span><br><span class="line">          r<span class="string">&#x27;CC[C@H](C)[C@@H]1[C@H](C=C[C@@]2(O1)C[C@@H]3C[C@H](O2)C/C=C(/[C@H]([C@H](/C=C/C=C/4\CO[C@H]5[C@@]4([C@@H](C=C([C@H]5O)C)C(=O)O3)O)C)O[C@H]6C[C@@H]([C@H]([C@@H](O6)C)O[C@H]7C[C@@H]([C@H]([C@@H](O7)C)O)OC)OC)\C)C&#x27;</span>]</span><br><span class="line"></span><br><span class="line">vals = []</span><br><span class="line"><span class="keyword">for</span> smi <span class="keyword">in</span> smiles:</span><br><span class="line">    mol = Chem.MolFromSmiles(smi)</span><br><span class="line">    properties = cal_mol_prop(mol)</span><br><span class="line">    val = [smi] + list(properties.values())</span><br><span class="line">    vals.append(val)</span><br><span class="line"></span><br><span class="line">df_phy = pd.DataFrame(data=vals, columns=[<span class="string">&#x27;smiles&#x27;</span>]+mol_prop)</span><br><span class="line">df_raw = pd.read_csv(<span class="string">&#x27;data/features/compound_phy_raw.tsv&#x27;</span>, sep=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">df_phy_new = pd.concat([df_raw, df_phy], axis=0)</span><br><span class="line">df_phy_new.to_csv(<span class="string">&#x27;data/features/compound_phy.tsv&#x27;</span>, sep=<span class="string">&#x27; &#x27;</span>, index=False)</span><br><span class="line"></span><br><span class="line"><span class="comment"># esm embedding</span></span><br><span class="line">prots = [<span class="string">&#x27;FAM171A2&#x27;</span>, <span class="string">&#x27;synuclein&#x27;</span>]</span><br><span class="line">seqs = [<span class="string">&#x27;KSPPEPPSPQEILIKVQVYVSGELVPLARASVDVFGNRTLLAAGTTDSEGVATLPLSYRLGTWVLVTAARPGFLTNSVPWRVDKLPLYASVSLYLLP&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;LGKNEEGAPQEGILEDMPVDPDNEAYEMPSEEGYQDYEPEA&#x27;</span>]</span><br><span class="line">embs = []</span><br><span class="line"><span class="keyword">for</span> prot <span class="keyword">in</span> prots:</span><br><span class="line">    emb = torch.load(f<span class="string">&#x27;esm_emb/&#123;prot&#125;.pt&#x27;</span>)</span><br><span class="line">    emb = emb[<span class="string">&#x27;representations&#x27;</span>][30].mean(dim=0).tolist()</span><br><span class="line">    emb = [prot] + emb</span><br><span class="line">    embs.append(emb)</span><br><span class="line">df_prot = pd.DataFrame(data=embs)</span><br><span class="line">df_raw = pd.read_csv(<span class="string">&#x27;data/features/protein_esm2_raw.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, header=None)</span><br><span class="line">df_prot_new = pd.concat([df_raw, df_prot], axis=0)</span><br><span class="line">df_prot_new.to_csv(<span class="string">&#x27;data/features/protein_esm2.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, index=False, header=None)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pfeature</span></span><br><span class="line">cols = [<span class="string">&#x27;PCP_PC&#x27;</span>, <span class="string">&#x27;PCP_NC&#x27;</span>, <span class="string">&#x27;PCP_NE&#x27;</span>, <span class="string">&#x27;PCP_PO&#x27;</span>, <span class="string">&#x27;PCP_NP&#x27;</span>, <span class="string">&#x27;PCP_AL&#x27;</span>, <span class="string">&#x27;PCP_CY&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;PCP_AR&#x27;</span>, <span class="string">&#x27;PCP_AC&#x27;</span>, <span class="string">&#x27;PCP_BS&#x27;</span>, <span class="string">&#x27;PCP_NE_pH&#x27;</span>, <span class="string">&#x27;PCP_HB&#x27;</span>, <span class="string">&#x27;PCP_HL&#x27;</span>, <span class="string">&#x27;PCP_NT&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;PCP_HX&#x27;</span>, <span class="string">&#x27;PCP_SC&#x27;</span>, <span class="string">&#x27;PCP_TN&#x27;</span>, <span class="string">&#x27;PCP_SM&#x27;</span>, <span class="string">&#x27;PCP_LR&#x27;</span>]</span><br><span class="line">pfeature = pd.read_csv(<span class="string">&#x27;pfeature/result.csv&#x27;</span>)[cols]</span><br><span class="line">pfeature[<span class="string">&#x27;uniprot_id&#x27;</span>] = prots</span><br><span class="line">df_raw = pd.read_csv(<span class="string">&#x27;data/features/protein_phy_raw.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">pfeature_new = pd.concat([df_raw, pfeature], axis=0)</span><br><span class="line">pfeature_new.to_csv(<span class="string">&#x27;data/features/protein_phy.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, index=False)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加sequence</span></span><br><span class="line">df_raw = pd.read_csv(<span class="string">&#x27;data/protein_seqs_raw.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">df_seq = pd.DataFrame(&#123;<span class="string">&#x27;uniprot_id&#x27;</span>: prots, <span class="string">&#x27;sequence&#x27;</span>: seqs&#125;)</span><br><span class="line">df_seq_new = pd.concat([df_raw, df_seq], axis=0)</span><br><span class="line">df_seq_new.to_csv(<span class="string">&#x27;data/protein_seqs.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, index=False)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fold data</span></span><br><span class="line">df_fold = pd.read_csv(<span class="string">&#x27;data/folds/S1/test_fold1.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">vs = []</span><br><span class="line"><span class="keyword">for</span> i, smi <span class="keyword">in</span> enumerate(smiles):</span><br><span class="line">    dlip_id = f<span class="string">&#x27;TEST&#123;i&#125;&#x27;</span></span><br><span class="line">    ref_name = f<span class="string">&quot;LIG-&#123;i&#125;&quot;</span></span><br><span class="line">    val = [dlip_id, smi, ref_name, ref_name, prots[0], prots[1],</span><br><span class="line">            <span class="string">&#x27;nan&#x27;</span>, <span class="string">&#x27;nan&#x27;</span>, <span class="string">&#x27;nan&#x27;</span>, 4.0, 0]</span><br><span class="line">    vs.append(val)</span><br><span class="line">df_test = pd.DataFrame(data=vs, columns=list(df_fold.columns))</span><br><span class="line">df_test.to_csv(<span class="string">&#x27;data/folds/S5/test_fold1.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, index=False)</span><br><span class="line">df_test.to_csv(<span class="string">&#x27;data/folds/S5/test_fold2.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, index=False)</span><br><span class="line">df_test.to_csv(<span class="string">&#x27;data/folds/S5/test_fold3.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, index=False)</span><br><span class="line">df_test.to_csv(<span class="string">&#x27;data/folds/S5/test_fold4.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, index=False)</span><br></pre></td></tr></table></figure><h3 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python main.py --<span class="built_in">fold</span> 1 --eval_setting S1</span><br><span class="line">python main.py --<span class="built_in">fold</span> 2 --eval_setting S2</span><br><span class="line">python main.py --<span class="built_in">fold</span> 3 --eval_setting S3</span><br><span class="line">python main.py --<span class="built_in">fold</span> 4 --eval_setting S4</span><br></pre></td></tr></table></figure><p>每个模型大约花费1个小时（4090）训练，训练完毕后，在根目录下会生成下列文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setting_S1_fold1.model</span><br><span class="line">setting_S2_fold2.model</span><br><span class="line">setting_S3_fold3.model</span><br><span class="line">setting_S4_fold4.model</span><br></pre></td></tr></table></figure><h3 id="预测脚本"><a href="#预测脚本" class="headerlink" title="预测脚本"></a>预测脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">import argparse</span><br><span class="line">import copy</span><br><span class="line">import sys</span><br><span class="line">import <span class="keyword">time</span></span><br><span class="line">import random</span><br><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import torch</span><br><span class="line">import torch.nn as nn</span><br><span class="line">from torch_geometric.data import DataLoader</span><br><span class="line">sys.path.insert(0, <span class="string">&#x27;./src&#x27;</span>)</span><br><span class="line">from datasets.PPIMI_datasets import ModulatorPPIDataset, performance_evaluation, get_best_threshold</span><br><span class="line">from compound_gnn_model import GNNComplete</span><br><span class="line">from MultiPPIMI import MultiPPIMI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def train(PPIMI_model, device, dataloader, optimizer):</span><br><span class="line">    PPIMI_model.train()</span><br><span class="line">    loss_accum = 0</span><br><span class="line">    <span class="keyword">for</span> step_idx, batch <span class="keyword">in</span> enumerate(dataloader):</span><br><span class="line">        modulator, rdkit_descriptors, ppi_esm, label = batch</span><br><span class="line">        modulator = modulator.to(device)</span><br><span class="line">        rdkit_descriptors = rdkit_descriptors.to(device)</span><br><span class="line">        ppi_esm = ppi_esm.to(device)</span><br><span class="line">        label = label.to(device)</span><br><span class="line">        pred = PPIMI_model(modulator, rdkit_descriptors, ppi_esm).squeeze()</span><br><span class="line"></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss = criterion(pred, label)</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        loss_accum += loss.detach().item()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Loss:\t&#123;&#125;&#x27;</span>.format(loss_accum / len(dataloader)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def predicting(PPIMI_model, device, dataloader):</span><br><span class="line">    PPIMI_model.<span class="built_in">eval</span>()</span><br><span class="line">    total_preds = []</span><br><span class="line">    total_labels = []</span><br><span class="line">    with torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> batch <span class="keyword">in</span> dataloader:</span><br><span class="line">            modulator, rdkit_descriptors, ppi_esm, label = batch</span><br><span class="line">            modulator = modulator.to(device)</span><br><span class="line">            rdkit_descriptors = rdkit_descriptors.to(device)</span><br><span class="line">            ppi_esm = ppi_esm.to(device)</span><br><span class="line">            label = label.to(device)</span><br><span class="line">            pred = PPIMI_model(modulator, rdkit_descriptors, ppi_esm).squeeze()</span><br><span class="line">            <span class="keyword">if</span> pred.ndim == 1:</span><br><span class="line">                pred = pred.unsqueeze(0)</span><br><span class="line">            total_preds.append(pred.detach().cpu())</span><br><span class="line">            total_labels.append(label.detach().cpu())</span><br><span class="line"></span><br><span class="line">    total_preds = torch.cat(total_preds, dim=0)</span><br><span class="line">    total_labels = torch.cat(total_labels, dim=0)</span><br><span class="line">    <span class="built_in">return</span> total_labels.numpy(), total_preds.numpy()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&#x27;PyTorch implementation of MultiPPIMI&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--device&#x27;</span>, <span class="built_in">type</span>=int, default=0)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--eval_setting&#x27;</span>, <span class="built_in">type</span>=str, default=<span class="string">&#x27;S1&#x27;</span>, choices=[<span class="string">&#x27;S1&#x27;</span>, <span class="string">&#x27;S2&#x27;</span>, <span class="string">&#x27;S3&#x27;</span>, <span class="string">&#x27;S4&#x27;</span>, <span class="string">&#x27;S5&#x27;</span>])</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--fold&#x27;</span>, <span class="built_in">type</span>=str)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--seed&#x27;</span>, <span class="built_in">type</span>=int, default=42)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--runseed&#x27;</span>, <span class="built_in">type</span>=int, default=123)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--batch_size&#x27;</span>, <span class="built_in">type</span>=int, default=64)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--learning_rate&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=0.0005)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--epochs&#x27;</span>, <span class="built_in">type</span>=int, default=500)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--pretrained_model_file&#x27;</span>, <span class="built_in">type</span>=str, default=<span class="string">&#x27;./src/GraphMVP_C.model&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--output_model_file&#x27;</span>, <span class="built_in">type</span>=str, default=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--out_path&#x27;</span>, <span class="built_in">type</span>=str, default=<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="comment">########## For compound embedding ##########</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--num_layer&#x27;</span>, <span class="built_in">type</span>=int, default=5)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--emb_dim&#x27;</span>, <span class="built_in">type</span>=int, default=300)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--dropout_ratio&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">float</span>, default=0.)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--JK&#x27;</span>, <span class="built_in">type</span>=str, default=<span class="string">&#x27;last&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--gnn_type&#x27;</span>, <span class="built_in">type</span>=str, default=<span class="string">&#x27;gin&#x27;</span>)</span><br><span class="line">    <span class="comment">########## For protein embedding ##########</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--ppi_hidden_dim&#x27;</span>, <span class="built_in">type</span>=int, default=1318)</span><br><span class="line">    <span class="comment">########## For attention module ##########</span></span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--h_dim&#x27;</span>, <span class="built_in">type</span>=int, default=512)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--n_heads&#x27;</span>, <span class="built_in">type</span>=int, default=2)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="comment">### set random seeds</span></span><br><span class="line">    torch.manual_seed(args.runseed)</span><br><span class="line">    np.random.seed(args.runseed)</span><br><span class="line">    random.seed(args.seed)</span><br><span class="line">    <span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">        torch.cuda.manual_seed(args.seed)</span><br><span class="line">    device = torch.device(f<span class="string">&#x27;cuda:&#123;args.device&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(device)</span><br><span class="line"></span><br><span class="line">    <span class="comment">########## Set up dataset and dataloader ##########</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">########## Set up dataset and dataloader ##########</span></span><br><span class="line">    val_dataset = ModulatorPPIDataset(mode=<span class="string">&#x27;valid&#x27;</span>, setting=args.eval_setting, <span class="built_in">fold</span>=args.fold)</span><br><span class="line">    val_dataloader = DataLoader(val_dataset, batch_size=args.batch_size, shuffle=False, drop_last=False)</span><br><span class="line">    test_dataset = ModulatorPPIDataset(mode=<span class="string">&#x27;test&#x27;</span>, setting=args.eval_setting, <span class="built_in">fold</span>=args.fold)</span><br><span class="line">    test_dataloader = DataLoader(test_dataset, batch_size=args.batch_size, shuffle=False, drop_last=False)</span><br><span class="line"></span><br><span class="line">    <span class="comment">########## Set up model ##########</span></span><br><span class="line">    modulator_model = GNNComplete(args.num_layer, args.emb_dim, JK=args.JK, drop_ratio=args.dropout_ratio,</span><br><span class="line">                                  gnn_type=args.gnn_type)</span><br><span class="line">    PPIMI_model = MultiPPIMI(</span><br><span class="line">        modulator_model,</span><br><span class="line">        modulator_emb_dim=310,</span><br><span class="line">        ppi_emb_dim=args.ppi_hidden_dim,</span><br><span class="line">        device=device,</span><br><span class="line">        h_dim=args.h_dim, n_heads=args.n_heads</span><br><span class="line">    ).to(device)</span><br><span class="line">    <span class="built_in">split</span> = <span class="string">&#x27;Nan&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> not args.pretrained_model_file == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;========= Loading from &#123;&#125;&#x27;</span>.format(args.pretrained_model_file))</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;S1&quot;</span> <span class="keyword">in</span> args.pretrained_model_file:</span><br><span class="line">            <span class="built_in">split</span> = <span class="string">&#x27;S1&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;S2&quot;</span> <span class="keyword">in</span> args.pretrained_model_file:</span><br><span class="line">            <span class="built_in">split</span> = <span class="string">&#x27;S2&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;S3&quot;</span> <span class="keyword">in</span> args.pretrained_model_file:</span><br><span class="line">            <span class="built_in">split</span> = <span class="string">&#x27;S3&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;S4&quot;</span> <span class="keyword">in</span> args.pretrained_model_file:</span><br><span class="line">            <span class="built_in">split</span> = <span class="string">&#x27;S4&#x27;</span></span><br><span class="line">        PPIMI_model.load_state_dict(torch.load(args.pretrained_model_file))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;MultiPPIMI model\n&#x27;</span>, PPIMI_model)</span><br><span class="line"></span><br><span class="line">    G, P = predicting(PPIMI_model, device, val_dataloader)</span><br><span class="line">    output = torch.softmax(torch.from_numpy(P), dim=1)</span><br><span class="line">    best_threshold = get_best_threshold(output, G)  <span class="comment"># S1:0.123; S2: 0.2925; S3:; S4:</span></span><br><span class="line"></span><br><span class="line">    df_test = pd.read_csv(<span class="string">&#x27;data/folds/S5/test_fold1.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>)[[<span class="string">&#x27;dlip_id&#x27;</span>, <span class="string">&#x27;SMILES&#x27;</span>]]</span><br><span class="line">    G, P = predicting(PPIMI_model, device, test_dataloader)</span><br><span class="line">    output = torch.softmax(torch.from_numpy(P), dim=1)</span><br><span class="line">    pred_scores = output[:, 1]</span><br><span class="line">    pred_labels = output[:, 1] &gt; best_threshold</span><br><span class="line">    pred_labels = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> pred_labels]</span><br><span class="line">    df_test[<span class="string">&#x27;pred_score&#x27;</span>] = pred_scores</span><br><span class="line">    df_test[<span class="string">&#x27;pred_label&#x27;</span>] = pred_labels</span><br><span class="line">    df_test.to_csv(f<span class="string">&#x27;data/result_&#123;split&#125;.csv&#x27;</span>, sep=<span class="string">&#x27;,&#x27;</span>, index=False)</span><br><span class="line">    <span class="comment"># print(f&quot;fold: &#123;split&#125;; best threshold: &#123;round(best_threshold, 3)&#125;; pred scores: &#123;pred_scores&#125;; pred labels: &#123;pred_labels&#125;&quot;)</span></span><br></pre></td></tr></table></figure><p>执行推理脚本后，data文件夹下会出现预测结果文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result_S1.csv</span><br><span class="line">result_S2.csv</span><br><span class="line">result_S3.csv</span><br><span class="line">result_S4.csv</span><br></pre></td></tr></table></figure><p>预测结果文件结构，第三列是预测分数，第四列是预测的标签（阈值根据每个模型的valid数据的最佳预测，详见推理代码）：<br><img src="/docs/20250321_1.png" alt="Blog Pages"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/sun-heqi/MultiPPIMI/tree/main&quot;&gt;https://github.com/sun-heqi/MultiPPIMI/tree/main&lt;/a&gt;&lt;br&gt;特征说明：&lt;a href=&quot;htt</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>个人常用linux命令</title>
    <link href="http://example.com/2025/03/20/%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2025/03/20/%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8linux%E5%91%BD%E4%BB%A4/</id>
    <published>2025-03-20T08:39:35.835Z</published>
    <updated>2025-03-20T08:16:39.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="文件数量统计"><a href="#文件数量统计" class="headerlink" title="文件数量统计"></a>文件数量统计</h2><p>1.统计当前目录下文件的个数（不包括目录）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l | grep &quot;^-&quot; | wc -l</span><br></pre></td></tr></table></figure><p>2.统计当前目录下文件的个数（包括子目录）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR| grep &quot;^-&quot; | wc -l</span><br></pre></td></tr></table></figure><p>查看某目录下文件夹(目录)的个数（包括子目录）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR | grep &quot;^d&quot; | wc -l</span><br></pre></td></tr></table></figure><h2 id="文件大小统计"><a href="#文件大小统计" class="headerlink" title="文件大小统计"></a>文件大小统计</h2><p>当前目录下文件大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h --max-depth=1</span><br></pre></td></tr></table></figure><h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><p>压缩</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf dataset.tar.gz dataset/</span><br><span class="line">zip -r compressed.zip folder/</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf file.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件&quot;&gt;&lt;a href=&quot;#文件&quot; class=&quot;headerlink&quot; title=&quot;文件&quot;&gt;&lt;/a&gt;文件&lt;/h1&gt;&lt;h2 id=&quot;文件数量统计&quot;&gt;&lt;a href=&quot;#文件数量统计&quot; class=&quot;headerlink&quot; title=&quot;文件数量统计&quot;&gt;&lt;/a&gt;文</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>快速搭建github博客</title>
    <link href="http://example.com/2025/03/20/%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2025/03/20/%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/</id>
    <published>2025-03-20T07:49:32.532Z</published>
    <updated>2025-03-20T08:07:09.764Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>GitHub除了常见的管理代码，还提供了Pages功能，通过架设静态网站，构建在线博客。  </p><p>博客框架：Hexo</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="1-创建自己的github账号"><a href="#1-创建自己的github账号" class="headerlink" title="1.创建自己的github账号"></a>1.创建自己的github账号</h4><h4 id="2-电脑环境中安装git工具"><a href="#2-电脑环境中安装git工具" class="headerlink" title="2.电脑环境中安装git工具"></a>2.电脑环境中安装git工具</h4><p>安装完毕之后，能正常使用git命令，就代表配置好了.  </p><h4 id="3-安装Node-js"><a href="#3-安装Node-js" class="headerlink" title="3.安装Node.js"></a>3.安装Node.js</h4><p>下载地址：<a href="https://link.zhihu.com/?target=https://nodejs.org/zh-cn/download/">https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn/download/</a><br>安装完毕之后，能正常使用npm命令，就代表配置好了  </p><h4 id="4-安装Hexo"><a href="#4-安装Hexo" class="headerlink" title="4.安装Hexo"></a>4.安装Hexo</h4><p>安装命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">```  </span><br><span class="line">这是一个博客框架，用于快速创建项目、页面、编译、部署博客。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 二、初始化博客</span></span><br><span class="line">使用如下命令创建项目：</span><br><span class="line">```bash</span><br><span class="line">hexo init &#123;name&#125;</span><br></pre></td></tr></table></figure><p>如创建名字为allen的博客：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init allen</span><br></pre></td></tr></table></figure><p>进入新生成的文件夹里面，然后调用Hexo的generate命令，将Hexo编译生成HTML代码，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>最后，在本地运行hexo:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo serve</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexois running at http://localhost:4000 . Press Ctrl+C to stop </span><br></pre></td></tr></table></figure><p>这代表可以在<a href="http://localhost:4000看到博客站点了。">http://localhost:4000看到博客站点了。</a></p><h3 id="三、利用github-pages工具进行部署"><a href="#三、利用github-pages工具进行部署" class="headerlink" title="三、利用github pages工具进行部署"></a>三、利用github pages工具进行部署</h3><h4 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1.创建仓库"></a>1.创建仓库</h4><p>创建一个名为 {username}.github.io的仓库，比如用户名为allen，就创建名为{username}.github.io的repository</p><h4 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h4><p>打开博客的根目录，找到_config.yml 文件，找到Deployment这个地方，把刚才新建的repository 的地址贴过来，然后指定分支为main分支，最终修改为如下内容:  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&#123;username&#125;/&#123;username&#125;.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>这里的{username}和之前一样，需要根据实际用户名进行替换。<br>安装成功之后，执行部署命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>运行成功后打开{username}.github.io，就可以看到跟本地一模一样的博客内容了（可能要稍等几分钟）。</p><h3 id="四、创建自己的博客并发布"><a href="#四、创建自己的博客并发布" class="headerlink" title="四、创建自己的博客并发布"></a>四、创建自己的博客并发布</h3><p>假设markdown写好的博客文件为myBlog.md，那么需要把myBlog.md放到博客文件根目录下的source_posts文件夹中。注意，myBlog.md使用到的图片文件可以放在博客根目录下的某个地方，要和myBlog.md里的路径对应上。<br>最后，需要根据下列命令进行更新同步：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>我搭建的博客：<br><img src="/docs/20250320_1.png" alt="Blog Pages"><br>地址：<a href="https://xiangwenkai.github.io/">https://xiangwenkai.github.io</a></p><p>参考详细教程：<a href="https://zhuanlan.zhihu.com/p/371995929">https://zhuanlan.zhihu.com/p/371995929</a><br>hexo官网（含blog细节配置教程）：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;GitHub除了常见的管理代码，还提供了Pages功能，通过架设静态网站，构建在线博客。  &lt;/p&gt;
&lt;p&gt;博客框架：Hexo&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
  </entry>
  
</feed>
